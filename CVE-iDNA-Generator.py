#!/usr/bin/env python
import subprocess
import sys

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

try:
    import csv
    import tkinter as tk
    from tkinter import filedialog
    from docx import Document
    from docx.shared import Pt
    from docx.enum.style import WD_STYLE_TYPE
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.by import By
    from webdriver_manager.chrome import ChromeDriverManager
    from bs4 import BeautifulSoup
    import time
except ImportError as e:
    missing_module = str(e).split("No module named ")[1].strip("'")
    print(f"Missing module {missing_module}. Installing...")
    install(missing_module)
    print(f"{missing_module} installed. Please rerun the script.")
    sys.exit()

def setup_driver():
    options = Options()
    options.headless = True
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    return driver

def normalize_headers(headers):
    return {header.strip().strip('\ufeff').replace(' ', '_').upper(): header for header in headers}

def get_version_details(soup):
    version_details_list = []
    version_blocks = soup.select('div.cve-versions-column > div.menu.p-0')

    for block in version_blocks:
        # Extracting text for both affected and unaffected versions
        for item in block.select('li > span, li > p'):
            text = ' '.join(item.stripped_strings)
            version_details_list.append(text)

    return '\n'.join(version_details_list)

def get_vendor_product(soup):
    try:
        vendor = soup.select_one("#cve-vendor").text.strip()
        product = soup.select_one("#cve-product").text.strip()
    except Exception as e:
        print(f"Error extracting vendor/product: {e}")
        vendor = "N/A"
        product = "N/A"
    return vendor, product


def get_cve_details(driver, cve_id):
    if not cve_id:
        print(f"Skipping empty CVE ID.")
        return "N/A", "N/A", "N/A"
    affected_versions = "N/A"
    remediation_links = "N/A"
    published_date = "N/A"
    url = f"https://www.cve.org/CVERecord?id={cve_id}"
    driver.get(url)
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'time[data-v-6400a1e5]'))
        )
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        vendor, product = get_vendor_product(soup)
        time_tag = soup.find('time', {'data-v-6400a1e5': ''})
        if time_tag:
            published_date = time_tag.text.strip()

        affected_versions = get_version_details(soup)
        references_div = soup.select_one('div#cve-references ul')
        if references_div:
            remediation_links_list = [a['href'] for a in references_div.select('li a')]
            remediation_links = ', '.join(remediation_links_list)
    except Exception as e:
        print(f"Error retrieving details for CVE {cve_id}: {e}")
    return affected_versions, remediation_links, published_date, vendor, product


def generate_csv_report(driver, csv_file, output_file):
    with open(csv_file, 'r', encoding='utf-8-sig') as infile, \
         open(output_file, 'w', newline='', encoding='utf-8-sig') as outfile:

        reader = csv.DictReader(infile)
        normalized_headers = normalize_headers(reader.fieldnames)

        writer = csv.writer(outfile)
        # Write the new header
        writer.writerow([
            'CVE_ID', 
            'Primary Vendor - Product', 
            'Description', 
            'Published', 
            'CVSS Score', 
            'Source & Patch Info'
        ])

        for row in reader:
            cve_id = row.get(normalized_headers.get('CVE_ID', ''))
            if not cve_id:
                print("Skipping row with empty CVE ID.")
                continue

            affected_versions, remediation_links, published_date, vendor, product = get_cve_details(driver, cve_id)
            vendor_product = f"Vendor: {vendor} - Product: {product}"
            reference_text = f"Please review the following references for detailed information and update instructions: {remediation_links}"

            writer.writerow([
                cve_id,
                vendor_product,
                row.get(normalized_headers.get('DESCRIPTION', '')),
                published_date,
                row.get(normalized_headers.get('BASE_SCORE', '')),
                reference_text
            ])


    print(f"CSV report generated: {output_file}")


    
def main():
    root = tk.Tk()
    root.withdraw()
    csv_file = filedialog.askopenfilename(title="Select CVE CSV File", filetypes=[("CSV Files", "*.csv")])
    if csv_file:
        output_file = csv_file.rsplit('.', 1)[0] + '_report.csv'  # Modified output
        driver = setup_driver()
        try:
            generate_csv_report(driver, csv_file, output_file)
        finally:
            driver.quit()
    else:
        print("No file selected.")

if __name__ == '__main__':
    main()
